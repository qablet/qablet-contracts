{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-qablet","title":"What is Qablet?","text":"<p>A Qablet timetable defines a financial product using a sequence of payments, choices and conditions. A valuation model implemented with a Qablet parser can value any contract, as long as the contract can be described using a Qablet Timetable.</p> <p>The repository documented here contains code to create qablet timetables. It does not contain models that price qablet timetables.  Valuation models are available in other independent projects.</p>"},{"location":"#overview-of-documentation","title":"Overview of Documentation","text":"<p>The SPECIFICATIONS section describes the various elements of the language. Start with the timetable.</p> <p>The CONTRACTS section has methods to create many common financial contracts such as bonds, options, swaps, and swaptions. Start with the Bonds.</p>"},{"location":"#valuation-models","title":"Valuation models","text":"<p>Valuation models are available in other independent projects, such as qablet-basic. See the Qablet Learning Path for a set of Jupyter notebooks that value contracts using Monte-Carlo and Finite Difference models from the qablet-basic package.</p>"},{"location":"examples/bond_fixed/","title":"Fixed Bond","text":"<p>This module contains examples of creating timetables for Fixed Rate Bonds.</p>"},{"location":"examples/bond_fixed/#qablet_contracts.bond.fixed.cashflow_timetable","title":"<code>cashflow_timetable(ccy, times, amounts, track='')</code>","text":"<p>Create timetable from cashflows in a single currency. This example also shows how to create a timetable from arrays instead of a list of dictionaries, which is more efficient.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of cashflows.</p> required <code>times</code> <p>a list or ndarray of cashflows times.</p> required <code>amounts</code> <p>a list ndarray of cashflows amounts.</p> required <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = cashflow_timetable(\"USD\", [0.5, 1, 1.5], [0.05, 0.05, 1.05])\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time op  quantity unit\n0         0.5  +      0.05  USD\n1         1.0  +      0.05  USD\n2         1.5  +      1.05  USD\n</code></pre> Source code in <code>qablet_contracts\\bond\\fixed.py</code> <pre><code>def cashflow_timetable(ccy: str, times, amounts, track: str = \"\") -&gt; dict:\n    \"\"\"Create timetable from cashflows in a single currency. This example also shows how to create a timetable from arrays\n    instead of a list of dictionaries, which is more efficient.\n\n    Args:\n        ccy: the currency of cashflows.\n        times: a list or ndarray of cashflows times.\n        amounts: a list ndarray of cashflows amounts.\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = cashflow_timetable(\"USD\", [0.5, 1, 1.5], [0.05, 0.05, 1.05])\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time op  quantity unit\n        0         0.5  +      0.05  USD\n        1         1.0  +      0.05  USD\n        2         1.5  +      1.05  USD\n    \"\"\"\n    n = len(times)\n    return {\n        \"events\": pa.RecordBatch.from_arrays(\n            [\n                pa.DictionaryArray.from_arrays(\n                    indices=np.full(n, 0, dtype=np.int64), dictionary=[track]\n                ),  # tracks\n                pa.array(times),\n                pa.DictionaryArray.from_arrays(\n                    indices=np.full(n, 0, dtype=np.int64), dictionary=[\"+\"]\n                ),  # ops\n                pa.array(amounts),\n                pa.DictionaryArray.from_arrays(\n                    indices=np.full(n, 0, dtype=np.int64), dictionary=[ccy]\n                ),  # units\n            ],\n            schema=EVENT_SCHEMA,\n        ),\n        \"expressions\": {},\n    }\n</code></pre>"},{"location":"examples/bond_fixed/#qablet_contracts.bond.fixed.fixed_bond_timetable","title":"<code>fixed_bond_timetable(ccy, coupon, maturity, freq=2, track='')</code>","text":"<p>Create timetable for a fixed rate bond.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of cashflows.</p> required <code>coupon</code> <code>float</code> <p>the coupon rate per year.</p> required <code>maturity</code> <code>float</code> <p>the maturity of the bond.</p> required <code>freq</code> <code>int</code> <p>the number of coupon payments per year.</p> <code>2</code> <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = fixed_bond_timetable(\"USD\", 0.05, 2.1)\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time op  quantity unit\n0         0.1  +     0.025  USD\n1         0.6  +     0.025  USD\n2         1.1  +     0.025  USD\n3         1.6  +     0.025  USD\n4         2.1  +     1.025  USD\n</code></pre> Source code in <code>qablet_contracts\\bond\\fixed.py</code> <pre><code>def fixed_bond_timetable(\n    ccy: str, coupon: float, maturity: float, freq: int = 2, track: str = \"\"\n) -&gt; dict:\n    \"\"\"Create timetable for a fixed rate bond.\n\n    Args:\n        ccy: the currency of cashflows.\n        coupon: the coupon rate per year.\n        maturity: the maturity of the bond.\n        freq: the number of coupon payments per year.\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = fixed_bond_timetable(\"USD\", 0.05, 2.1)\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time op  quantity unit\n        0         0.1  +     0.025  USD\n        1         0.6  +     0.025  USD\n        2         1.1  +     0.025  USD\n        3         1.6  +     0.025  USD\n        4         2.1  +     1.025  USD\n    \"\"\"\n    n = ceil(maturity * freq)  # How many payments left ?\n    stub = (\n        maturity * freq - n + 1\n    )  # The first payment may be a stub/short coupon\n    times = (np.arange(n) + stub) / freq\n    amounts = np.full(n, coupon / freq)\n    amounts[-1] += 1  # The last payment includes the principal\n    return cashflow_timetable(ccy, times, amounts, track)\n</code></pre>"},{"location":"examples/bond_zero/","title":"Zero Bond","text":"<p>This module contains examples of creating timetables for Zero Coupon Bond and related contracts.</p>"},{"location":"examples/bond_zero/#qablet_contracts.bond.zero.zcb_timetable","title":"<code>zcb_timetable(ccy, maturity, track='')</code>","text":"<p>Create timetable for a zero coupon bond.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of the bond.</p> required <code>maturity</code> <code>float</code> <p>the maturity of the bond in years.</p> required <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = zcb_timetable(\"USD\", 1)\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time op  quantity unit\n0         1.0  +       1.0  USD\n</code></pre> Source code in <code>qablet_contracts\\bond\\zero.py</code> <pre><code>def zcb_timetable(ccy: str, maturity: float, track: str = \"\") -&gt; dict:\n    \"\"\"Create timetable for a **zero coupon bond**.\n\n    Args:\n        ccy: the currency of the bond.\n        maturity: the maturity of the bond in years.\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = zcb_timetable(\"USD\", 1)\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time op  quantity unit\n        0         1.0  +       1.0  USD\n    \"\"\"\n    events = [\n        {\n            \"track\": track,\n            \"time\": maturity,\n            \"op\": \"+\",\n            \"quantity\": 1,\n            \"unit\": ccy,\n        }  # get bond notional at bond expiration\n    ]\n    return timetable_from_dicts(events)\n</code></pre>"},{"location":"examples/bond_zero/#qablet_contracts.bond.zero.zbp_timetable","title":"<code>zbp_timetable(ccy, opt_maturity, bond_maturity, strike, track='')</code>","text":"<p>Create timetable for a zero coupon bond put.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of the bond.</p> required <code>opt_maturity</code> <code>float</code> <p>the maturity of the option in years.</p> required <code>bond_maturity</code> <code>float</code> <p>the maturity of the option in years.</p> required <code>strike</code> <code>float</code> <p>the option strike.</p> required <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = zbp_timetable(\"USD\", 0.5, 1.0, 0.95)\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time op  quantity unit\n0         0.5  &gt;      0.00  USD\n1         0.5  +      0.95  USD\n2         1.0  +     -1.00  USD\n</code></pre> Source code in <code>qablet_contracts\\bond\\zero.py</code> <pre><code>def zbp_timetable(\n    ccy: str,\n    opt_maturity: float,\n    bond_maturity: float,\n    strike: float,\n    track: str = \"\",\n) -&gt; dict:\n    \"\"\"Create timetable for a **zero coupon bond put**.\n\n    Args:\n        ccy: the currency of the bond.\n        opt_maturity: the maturity of the option in years.\n        bond_maturity: the maturity of the option in years.\n        strike: the option strike.\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = zbp_timetable(\"USD\", 0.5, 1.0, 0.95)\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time op  quantity unit\n        0         0.5  &gt;      0.00  USD\n        1         0.5  +      0.95  USD\n        2         1.0  +     -1.00  USD\n    \"\"\"\n\n    events = [\n        {\n            \"track\": track,\n            \"time\": opt_maturity,\n            \"op\": \"&gt;\",\n            \"quantity\": 0,\n            \"unit\": ccy,\n        },  # Choose greater of nothing (get 0) or exercise (continue to remaining events)\n        {\n            \"track\": track,\n            \"time\": opt_maturity,\n            \"op\": \"+\",\n            \"quantity\": strike,\n            \"unit\": ccy,\n        },  # get strike at expiration\n        {\n            \"track\": track,\n            \"time\": bond_maturity,\n            \"op\": \"+\",\n            \"quantity\": -1,\n            \"unit\": ccy,\n        },  # pay bond notional at bond expiration\n    ]\n    return timetable_from_dicts(events)\n</code></pre>"},{"location":"examples/equity_autocall/","title":"Eq AutoCallable Note","text":"<p>Create an autocallable note timetable</p>"},{"location":"examples/equity_autocall/#qablet_contracts.equity.autocall.autocallable_timetable","title":"<code>autocallable_timetable(ccy, asset_name, initial_spot, strike, maturity, barrier, barrier_pts, cpn_rate, track='')</code>","text":"<p>Create timetable for an Autocallable Note.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of the option.</p> required <code>asset_name</code> <code>str</code> <p>the name of the underlying asset.</p> required <code>initial_spot</code> <code>float</code> <p>the initial spot price of the asset.</p> required <code>strike</code> <code>float</code> <p>downside participation below this strike.</p> required <code>maturity</code> <code>float</code> <p>the maturity of the option in years.</p> required <code>barrier</code> <code>float</code> <p>the note is called above this barrier level.</p> required <code>barrier_pts</code> <code>int</code> <p>the number of barrier observation points. If 0, then the note is not autocallable.</p> required <code>cpn_rate</code> <code>float</code> <p>the coupon rate.</p> required <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = autocallable_timetable(\"USD\", \"AAPL\", 100, 80, 1, 102, 4, 0.092)\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time    op    quantity     unit\n0        0.25  CALL  102.326654      USD\n1        0.50  CALL  104.707441      USD\n2        0.75  CALL  107.143621      USD\n3        1.00  CALL  109.636482      USD\n4   NaN  1.00   NaN    1.000000  CALCPAY\n5        1.00     +    1.000000      PAY\n</code></pre> Source code in <code>qablet_contracts\\equity\\autocall.py</code> <pre><code>def autocallable_timetable(\n    ccy: str,\n    asset_name: str,\n    initial_spot: float,\n    strike: float,\n    maturity: float,\n    barrier: float,\n    barrier_pts: int,\n    cpn_rate: float,\n    track: str = \"\",\n) -&gt; dict:\n    \"\"\"Create timetable for an **Autocallable Note**.\n\n    Args:\n        ccy: the currency of the option.\n        asset_name: the name of the underlying asset.\n        initial_spot: the initial spot price of the asset.\n        strike: downside participation below this strike.\n        maturity: the maturity of the option in years.\n        barrier: the note is called above this barrier level.\n        barrier_pts: the number of barrier observation points. If 0, then the note is not autocallable.\n        cpn_rate: the coupon rate.\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = autocallable_timetable(\"USD\", \"AAPL\", 100, 80, 1, 102, 4, 0.092)\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time    op    quantity     unit\n        0        0.25  CALL  102.326654      USD\n        1        0.50  CALL  104.707441      USD\n        2        0.75  CALL  107.143621      USD\n        3        1.00  CALL  109.636482      USD\n        4   NaN  1.00   NaN    1.000000  CALCPAY\n        5        1.00     +    1.000000      PAY\n    \"\"\"\n\n    events_list = []\n    # Autocall events\n    if barrier_pts:\n        for barrier_time in np.linspace(0, maturity, barrier_pts + 1)[1:]:\n            events_list.append(\n                {\n                    \"track\": track,\n                    \"time\": barrier_time,\n                    \"op\": \"CALL\",\n                    \"quantity\": 100 * np.exp(barrier_time * cpn_rate),\n                    \"unit\": ccy,\n                }\n            )\n\n    # Determine the payoff at maturity\n    events_list.append(\n        {\n            \"track\": None,\n            \"time\": maturity,\n            \"op\": None,\n            \"quantity\": 1,\n            \"unit\": \"CALCPAY\",\n        }\n    )\n    # pay the payoff\n    events_list.append(\n        {\n            \"track\": \"\",\n            \"time\": maturity,\n            \"op\": \"+\",\n            \"quantity\": 1.0,\n            \"unit\": \"PAY\",\n        }\n    )\n\n    # Define the autocall condition\n    def ko_fn(inputs):\n        [S] = inputs\n        return [S &gt; (barrier * initial_spot / 100)]\n\n    call = {\n        \"type\": \"phrase\",\n        \"inp\": [asset_name],\n        \"fn\": ko_fn,\n    }\n\n    # Define the payoff calculation\n    fixed_pay = 100 * np.exp(maturity * cpn_rate)\n\n    def calc_fn(inputs):\n        [s] = inputs\n        eq_pay = s * (100 / initial_spot)\n        return [np.where(eq_pay &lt; strike, eq_pay, fixed_pay)]\n\n    calcpay = {\n        \"type\": \"snapper\",\n        \"inp\": [asset_name],\n        \"out\": [\"PAY\"],\n        \"fn\": calc_fn,\n    }\n\n    events_table = pa.RecordBatch.from_pylist(events_list, schema=EVENT_SCHEMA)\n    return {\n        \"events\": events_table,\n        \"expressions\": {\"CALCPAY\": calcpay, \"CALL\": call},\n    }\n</code></pre>"},{"location":"examples/equity_barrier/","title":"Eq Barrier Option","text":"<p>Utils for creating barrier options timetable</p>"},{"location":"examples/equity_barrier/#qablet_contracts.equity.barrier.ko_option_timetable","title":"<code>ko_option_timetable(ccy, asset_name, strike, maturity, is_call, barrier, barrier_type, barrier_pts, rebate=0, track='')</code>","text":"<p>Create timetable for a Knock Out Option.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of the option.</p> required <code>asset_name</code> <code>str</code> <p>the name of the underlying asset.</p> required <code>strike</code> <code>float</code> <p>the option strike.</p> required <code>maturity</code> <code>float</code> <p>the maturity of the option in years.</p> required <code>is_call</code> <code>bool</code> <p>true if the option is a call.</p> required <code>barrier</code> <code>float</code> <p>the barrier level.</p> required <code>barrier_type</code> <code>str</code> <p>the type of barrier option, e.g \"Dn/Out\" or \"Up/Out\".</p> required <code>barrier_pts</code> <code>int</code> <p>the number of barrier observation points.</p> required <code>rebate</code> <code>float</code> <p>the rebate amount.</p> <code>0</code> <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = ko_option_timetable(\"USD\", \"EQ\", 100, 0.2, True, 100, \"Dn/Out\", 5)\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time  op  quantity unit\n0        0.00  KO       0.0  USD\n1        0.04  KO       0.0  USD\n2        0.08  KO       0.0  USD\n3        0.12  KO       0.0  USD\n4        0.16  KO       0.0  USD\n5        0.20  KO       0.0  USD\n6        0.20   &gt;       0.0  USD\n7        0.20   +    -100.0  USD\n8        0.20   +       1.0   EQ\n</code></pre> Source code in <code>qablet_contracts\\equity\\barrier.py</code> <pre><code>def ko_option_timetable(\n    ccy: str,\n    asset_name: str,\n    strike: float,\n    maturity: float,\n    is_call: bool,\n    barrier: float,\n    barrier_type: str,\n    barrier_pts: int,\n    rebate: float = 0,\n    track: str = \"\",\n) -&gt; dict:\n    \"\"\"Create timetable for a **Knock Out Option**.\n\n    Args:\n        ccy: the currency of the option.\n        asset_name: the name of the underlying asset.\n        strike: the option strike.\n        maturity: the maturity of the option in years.\n        is_call: true if the option is a call.\n        barrier: the barrier level.\n        barrier_type: the type of barrier option, e.g \"Dn/Out\" or \"Up/Out\".\n        barrier_pts: the number of barrier observation points.\n        rebate: the rebate amount.\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = ko_option_timetable(\"USD\", \"EQ\", 100, 0.2, True, 100, \"Dn/Out\", 5)\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time  op  quantity unit\n        0        0.00  KO       0.0  USD\n        1        0.04  KO       0.0  USD\n        2        0.08  KO       0.0  USD\n        3        0.12  KO       0.0  USD\n        4        0.16  KO       0.0  USD\n        5        0.20  KO       0.0  USD\n        6        0.20   &gt;       0.0  USD\n        7        0.20   +    -100.0  USD\n        8        0.20   +       1.0   EQ\n    \"\"\"\n\n    events = []\n    for barrier_time in np.linspace(0, maturity, barrier_pts + 1):\n        events.append(\n            {\n                \"track\": track,\n                \"time\": barrier_time,\n                \"op\": \"KO\",\n                \"quantity\": rebate,\n                \"unit\": ccy,\n            }\n        )\n\n    vanilla_events = _option_events(\n        ccy, asset_name, strike, maturity, is_call, track\n    )\n\n    events.extend(vanilla_events)\n\n    # Define the knockout expression (KO)\n    if barrier_type == \"Dn/Out\":\n\n        def ko_fn(inputs):\n            [S] = inputs\n            return [S &lt; barrier]\n    elif barrier_type == \"Up/Out\":\n\n        def ko_fn(inputs):\n            [S] = inputs\n            return [S &gt; barrier]\n    else:\n        raise ValueError(f\"Unknown barrier type: {barrier_type}\")\n\n    ko = {\n        \"type\": \"phrase\",\n        \"inp\": [asset_name],\n        \"fn\": ko_fn,\n    }\n\n    events_table = pa.RecordBatch.from_pylist(events, schema=EVENT_SCHEMA)\n    return {\"events\": events_table, \"expressions\": {\"KO\": ko}}\n</code></pre>"},{"location":"examples/equity_cliquet/","title":"Eq Cliquet","text":"<p>This module contains examples of creating timetables for equity cliquet contracts.</p>"},{"location":"examples/equity_cliquet/#qablet_contracts.equity.cliquet.clique_timetable","title":"<code>clique_timetable(ccy, asset_name, fixings, global_floor, local_floor, local_cap, track='')</code>","text":"<p>Create timetable for an Accumulator Cliquet.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of the bond.</p> required <code>asset_name</code> <code>str</code> <p>the name of the underlying asset.</p> required <code>fixings</code> <code>List[float]</code> <p>the fixing times of the cliquet.</p> required <code>global_floor</code> <code>float</code> <p>the global floor of the cliquet.</p> required <code>local_floor</code> <code>float</code> <p>the local floor of the cliquet.</p> required <code>local_cap</code> <code>float</code> <p>the local cap of the cliquet.</p> required <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = clique_timetable(\"USD\", \"SPX\", [1.0, 2.0, 3.0], 0.01, -0.03, 0.05)\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time op  quantity     unit\n0   NaN   1.0  s      0.00    _INIT\n1   NaN   2.0  s      0.00  _UPDATE\n2   NaN   3.0  s      0.00  _UPDATE\n3         3.0  &gt;      0.01      USD\n4         3.0  +      1.00       _A\n</code></pre> Source code in <code>qablet_contracts\\equity\\cliquet.py</code> <pre><code>def clique_timetable(\n    ccy: str,\n    asset_name: str,\n    fixings: List[float],\n    global_floor: float,\n    local_floor: float,\n    local_cap: float,\n    track: str = \"\",\n) -&gt; dict:\n    \"\"\"Create timetable for an **Accumulator Cliquet**.\n\n    Args:\n        ccy: the currency of the bond.\n        asset_name: the name of the underlying asset.\n        fixings: the fixing times of the cliquet.\n        global_floor: the global floor of the cliquet.\n        local_floor: the local floor of the cliquet.\n        local_cap: the local cap of the cliquet.\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = clique_timetable(\"USD\", \"SPX\", [1.0, 2.0, 3.0], 0.01, -0.03, 0.05)\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time op  quantity     unit\n        0   NaN   1.0  s      0.00    _INIT\n        1   NaN   2.0  s      0.00  _UPDATE\n        2   NaN   3.0  s      0.00  _UPDATE\n        3         3.0  &gt;      0.01      USD\n        4         3.0  +      1.00       _A\n    \"\"\"\n\n    maturity = fixings[-1]\n\n    # define timetable\n    events = [\n        {\n            \"track\": None,\n            \"time\": fixings[0],\n            \"op\": \"s\",\n            \"quantity\": 0,\n            \"unit\": \"_INIT\",  # initialize accumulator\n        }\n    ]\n    for fixing_time in fixings[1:]:\n        events.append(\n            {\n                \"track\": None,\n                \"time\": fixing_time,\n                \"op\": \"s\",\n                \"quantity\": 0,\n                \"unit\": \"_UPDATE\",  # update accumulator\n            }\n        )\n    events.append(\n        {\n            \"track\": track,\n            \"time\": maturity,\n            \"op\": \"&gt;\",  # global floor\n            \"quantity\": global_floor,\n            \"unit\": ccy,\n        }\n    )\n    events.append(\n        {\n            \"track\": track,\n            \"time\": maturity,\n            \"op\": \"+\",  # pay the accumulated amount\n            \"quantity\": 1,\n            \"unit\": \"_A\",\n        }\n    )\n\n    # define accumulator functions\n    def accumulator_init_fn(inputs):\n        [s] = inputs\n        return [0, s]  # [A, S_last]\n\n    def accumulator_update_fn(inputs):\n        [s, s_last, a] = inputs\n\n        ret = s / s_last - 1.0  # ret = S / S_last - 1\n        ret = np.maximum(local_floor, ret)\n        ret = np.minimum(local_cap, ret)\n\n        return [a + ret, s]  # [A, S_last]\n\n    return {\n        \"events\": pa.RecordBatch.from_pylist(events, schema=EVENT_SCHEMA),\n        \"expressions\": {\n            \"_INIT\": {\n                \"type\": \"snapper\",\n                \"inp\": [asset_name],\n                \"fn\": accumulator_init_fn,\n                \"out\": [\"_A\", \"_S_last\"],\n            },\n            \"_UPDATE\": {\n                \"type\": \"snapper\",\n                \"inp\": [asset_name, \"_S_last\", \"_A\"],\n                \"fn\": accumulator_update_fn,\n                \"out\": [\"_A\", \"_S_last\"],\n            },\n        },\n    }\n</code></pre>"},{"location":"examples/equity_fwdoption/","title":"Eq Forward Option","text":"<p>Utils for creating forward starting options timetable</p>"},{"location":"examples/equity_fwdoption/#qablet_contracts.equity.forward_start.forward_option_timetable","title":"<code>forward_option_timetable(ccy, asset_name, strike_rate, strike_time, maturity, is_call, track='')</code>","text":"<p>Create timetable for a Forward Starting Option.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of the option.</p> required <code>asset_name</code> <code>str</code> <p>the name of the underlying asset.</p> required <code>strike_rate</code> <code>float</code> <p>the option strike in percent of fixing.</p> required <code>strike_time</code> <code>float</code> <p>the time at which the strike is fixed.</p> required <code>maturity</code> <code>float</code> <p>the maturity of the option in years.</p> required <code>is_call</code> <code>bool</code> <p>true if the option is a call.</p> required <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = forward_option_timetable(\"USD\", \"EQ\", 1.1, 1.0, 2.0, True)\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time   op  quantity unit\n0   NaN   1.0  NaN       0.0  FIX\n1         2.0    &gt;       0.0  USD\n2         2.0    +      -1.1   .K\n3         2.0    +       1.0   EQ\n</code></pre> Source code in <code>qablet_contracts\\equity\\forward_start.py</code> <pre><code>def forward_option_timetable(\n    ccy: str,\n    asset_name: str,\n    strike_rate: float,\n    strike_time: float,\n    maturity: float,\n    is_call: bool,\n    track: str = \"\",\n) -&gt; dict:\n    \"\"\"Create timetable for a **Forward Starting Option**.\n\n    Args:\n        ccy: the currency of the option.\n        asset_name: the name of the underlying asset.\n        strike_rate: the option strike in percent of fixing.\n        strike_time: the time at which the strike is fixed.\n        maturity: the maturity of the option in years.\n        is_call: true if the option is a call.\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = forward_option_timetable(\"USD\", \"EQ\", 1.1, 1.0, 2.0, True)\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time   op  quantity unit\n        0   NaN   1.0  NaN       0.0  FIX\n        1         2.0    &gt;       0.0  USD\n        2         2.0    +      -1.1   .K\n        3         2.0    +       1.0   EQ\n    \"\"\"\n    strike_snap = track + \".K\"\n    events = [\n        {\n            \"track\": None,\n            \"time\": strike_time,\n            \"op\": None,\n            \"quantity\": 0,\n            \"unit\": \"FIX\",  # set the strike\n        },\n        {\n            \"track\": track,\n            \"time\": maturity,\n            \"op\": \"&gt;\",\n            \"quantity\": 0,\n            \"unit\": ccy,\n        },\n        {\n            \"track\": track,\n            \"time\": maturity,\n            \"op\": \"+\",\n            \"quantity\": -strike_rate if is_call else strike_rate,\n            \"unit\": strike_snap,\n        },\n        {\n            \"track\": track,\n            \"time\": maturity,\n            \"op\": \"+\",\n            \"quantity\": 1 if is_call else -1,\n            \"unit\": asset_name,\n        },\n    ]\n\n    # Define the strike expression, return the spot itself.\n    def strike_fn(inputs):\n        return inputs\n\n    fix = {\n        \"type\": \"snapper\",\n        \"inp\": [asset_name],\n        \"fn\": strike_fn,\n        \"out\": [strike_snap],\n    }\n\n    events_table = pa.RecordBatch.from_pylist(events, schema=EVENT_SCHEMA)\n    return {\"events\": events_table, \"expressions\": {\"FIX\": fix}}\n</code></pre>"},{"location":"examples/equity_rainbow/","title":"Eq Rainbow Option","text":"<p>This module contains examples of creating timetables for equity rainbow options.</p>"},{"location":"examples/equity_rainbow/#qablet_contracts.equity.rainbow.rainbow_timetable","title":"<code>rainbow_timetable(ccy, asset_names, strikes, notional, maturity, is_call, track='')</code>","text":"<p>Create timetable for an Equity Rainbow Option.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of the option.</p> required <code>asset_names</code> <code>List[str]</code> <p>the name of the underlying assets.</p> required <code>strikes</code> <code>List[float]</code> <p>the option strikes.</p> required <code>notional</code> <code>float</code> <p>the notional of the option.</p> required <code>maturity</code> <code>float</code> <p>the maturity of the option in years.</p> required <code>is_call</code> <code>bool</code> <p>true if the option is a call.</p> required <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = rainbow_timetable(\n&gt;&gt;&gt;     \"USD\",\n&gt;&gt;&gt;     [\"SPX\", \"FTSE\", \"N225\"],\n&gt;&gt;&gt;     [5087, 7684, 39100],\n&gt;&gt;&gt;     100_000,\n&gt;&gt;&gt;     0.5,\n&gt;&gt;&gt;     True\n&gt;&gt;&gt; )\n&gt;&gt;&gt; tt[\"events\"].to_pandas()  # Call\n  track  time op       quantity  unit\n0         0.5  + -100000.000000   USD\n1         0.5  &gt;      19.657952   SPX\n2         0.5  &gt;      13.014055  FTSE\n3         0.5  &gt;       2.557545  N225\n4         0.5  +  100000.000000   USD\n</code></pre> <pre><code>&gt;&gt;&gt; tt = rainbow_timetable(\n&gt;&gt;&gt;     \"USD\",\n&gt;&gt;&gt;     [\"SPX\", \"FTSE\", \"N225\"],\n&gt;&gt;&gt;     [5087, 7684, 39100],\n&gt;&gt;&gt;     100_000,\n&gt;&gt;&gt;     0.5,\n&gt;&gt;&gt;     False\n&gt;&gt;&gt; )\n&gt;&gt;&gt; tt[\"events\"].to_pandas()  # Put\n  track  time op       quantity  unit\n0         0.5  +  100000.000000   USD\n1         0.5  &gt;     -19.657952   SPX\n2         0.5  &gt;     -13.014055  FTSE\n3         0.5  &gt;      -2.557545  N225\n4         0.5  + -100000.000000   USD\n</code></pre> Source code in <code>qablet_contracts\\equity\\rainbow.py</code> <pre><code>def rainbow_timetable(\n    ccy: str,\n    asset_names: List[str],\n    strikes: List[float],\n    notional: float,\n    maturity: float,\n    is_call: bool,\n    track: str = \"\",\n) -&gt; dict:\n    \"\"\"Create timetable for an **Equity Rainbow Option**.\n\n    Args:\n        ccy: the currency of the option.\n        asset_names: the name of the underlying assets.\n        strikes: the option strikes.\n        notional: the notional of the option.\n        maturity: the maturity of the option in years.\n        is_call: true if the option is a call.\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = rainbow_timetable(\n        &gt;&gt;&gt;     \"USD\",\n        &gt;&gt;&gt;     [\"SPX\", \"FTSE\", \"N225\"],\n        &gt;&gt;&gt;     [5087, 7684, 39100],\n        &gt;&gt;&gt;     100_000,\n        &gt;&gt;&gt;     0.5,\n        &gt;&gt;&gt;     True\n        &gt;&gt;&gt; )\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()  # Call\n          track  time op       quantity  unit\n        0         0.5  + -100000.000000   USD\n        1         0.5  &gt;      19.657952   SPX\n        2         0.5  &gt;      13.014055  FTSE\n        3         0.5  &gt;       2.557545  N225\n        4         0.5  +  100000.000000   USD\n\n        &gt;&gt;&gt; tt = rainbow_timetable(\n        &gt;&gt;&gt;     \"USD\",\n        &gt;&gt;&gt;     [\"SPX\", \"FTSE\", \"N225\"],\n        &gt;&gt;&gt;     [5087, 7684, 39100],\n        &gt;&gt;&gt;     100_000,\n        &gt;&gt;&gt;     0.5,\n        &gt;&gt;&gt;     False\n        &gt;&gt;&gt; )\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()  # Put\n          track  time op       quantity  unit\n        0         0.5  +  100000.000000   USD\n        1         0.5  &gt;     -19.657952   SPX\n        2         0.5  &gt;     -13.014055  FTSE\n        3         0.5  &gt;      -2.557545  N225\n        4         0.5  + -100000.000000   USD\n    \"\"\"\n\n    sign = 1 if is_call else -1\n    # Pay the initial strike\n    events = [\n        {\n            \"track\": \"\",\n            \"time\": maturity,\n            \"op\": \"+\",\n            \"quantity\": -notional * sign,\n            \"unit\": ccy,\n        },\n    ]\n\n    # Options to receive any of the assets\n    for asset, strike in zip(asset_names, strikes):\n        events.append(\n            {\n                \"track\": \"\",\n                \"time\": maturity,\n                \"op\": \"&gt;\",\n                \"quantity\": notional / strike * sign,\n                \"unit\": asset,\n            }\n        )\n\n    # Otherwise receive the notional back\n    events.append(\n        {\n            \"track\": \"\",\n            \"time\": maturity,\n            \"op\": \"+\",\n            \"quantity\": notional * sign,\n            \"unit\": ccy,\n        }\n    )\n    return timetable_from_dicts(events)\n</code></pre>"},{"location":"examples/equity_vanilla/","title":"Eq Vanilla Option","text":"<p>This module contains examples of creating timetables for equity vanilla options.</p>"},{"location":"examples/equity_vanilla/#qablet_contracts.equity.vanilla.option_timetable","title":"<code>option_timetable(ccy, asset_name, strike, maturity, is_call, track='')</code>","text":"<p>Create timetable for an Equity Vanilla Option.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of the option.</p> required <code>asset_name</code> <code>str</code> <p>the name of the underlying asset.</p> required <code>strike</code> <code>float</code> <p>the option strike.</p> required <code>maturity</code> <code>float</code> <p>the maturity of the option in years.</p> required <code>is_call</code> <code>bool</code> <p>true if the option is a call.</p> required <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = option_timetable(\"USD\", \"AAPL\", 190, 1.0, True)  # Call\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time op  quantity  unit\n0         1.0  &gt;       0.0   USD\n1         1.0  +    -190.0   USD\n2         1.0  +       1.0  AAPL\n</code></pre> <pre><code>&gt;&gt;&gt; tt = option_timetable(\"USD\", \"AAPL\", 190, 1.0, False)  # Put\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time op  quantity  unit\n0         1.0  &gt;       0.0   USD\n1         1.0  +     190.0   USD\n2         1.0  +      -1.0  AAPL\n</code></pre> Source code in <code>qablet_contracts\\equity\\vanilla.py</code> <pre><code>def option_timetable(\n    ccy: str,\n    asset_name: str,\n    strike: float,\n    maturity: float,\n    is_call: bool,\n    track: str = \"\",\n) -&gt; dict:\n    \"\"\"Create timetable for an **Equity Vanilla Option**.\n\n    Args:\n        ccy: the currency of the option.\n        asset_name: the name of the underlying asset.\n        strike: the option strike.\n        maturity: the maturity of the option in years.\n        is_call: true if the option is a call.\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = option_timetable(\"USD\", \"AAPL\", 190, 1.0, True)  # Call\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time op  quantity  unit\n        0         1.0  &gt;       0.0   USD\n        1         1.0  +    -190.0   USD\n        2         1.0  +       1.0  AAPL\n\n        &gt;&gt;&gt; tt = option_timetable(\"USD\", \"AAPL\", 190, 1.0, False)  # Put\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time op  quantity  unit\n        0         1.0  &gt;       0.0   USD\n        1         1.0  +     190.0   USD\n        2         1.0  +      -1.0  AAPL\n    \"\"\"\n\n    events = _option_events(ccy, asset_name, strike, maturity, is_call, track)\n\n    return timetable_from_dicts(events)\n</code></pre>"},{"location":"examples/rate_swaption/","title":"Swaptions","text":"<p>This module contains examples of creating timetables for rate contracts such as swaps and swaptions.</p>"},{"location":"examples/rate_swaption/#qablet_contracts.rate.swaption.simple_swap_period","title":"<code>simple_swap_period(ccy, start, end, fixed_rate, track='')</code>","text":"<p>Simple representation of a swap period, paying fixed, receiving floating rate.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of the swap.</p> required <code>start</code> <code>float</code> <p>the start of the period in years.</p> required <code>end</code> <code>float</code> <p>the end of the period in years.</p> required <code>fixed_rate</code> <code>float</code> <p>the fixed annual rate of the swap.</p> required <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> Source code in <code>qablet_contracts\\rate\\swaption.py</code> <pre><code>def simple_swap_period(\n    ccy: str, start: float, end: float, fixed_rate: float, track: str = \"\"\n) -&gt; list:\n    \"\"\"Simple representation of a swap period, paying fixed, receiving floating rate.\n\n    Args:\n        ccy: the currency of the swap.\n        start: the start of the period in years.\n        end: the end of the period in years.\n        fixed_rate: the fixed annual rate of the swap.\n        track: an optional identifier for the contract.\n    \"\"\"\n    return [\n        {\n            \"track\": track,\n            \"time\": start,\n            \"op\": \"+\",\n            \"quantity\": 1,\n            \"unit\": ccy,\n        },\n        {\n            \"track\": track,\n            \"time\": end,\n            \"op\": \"+\",\n            \"quantity\": -1 - fixed_rate * (end - start),\n            \"unit\": ccy,\n        },\n    ]\n</code></pre>"},{"location":"examples/rate_swaption/#qablet_contracts.rate.swaption.swap_timetable","title":"<code>swap_timetable(ccy, times, strike_rate, track='')</code>","text":"<p>Create timetable for a Vanilla Swap.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of the swap.</p> required <code>times</code> <code>List[float]</code> <p>the period times of the swap, including the inception and maturity.</p> required <code>strike_rate</code> <code>float</code> <p>the strike rate of the swaption (in units, i.e. 0.02 means 200 bps).</p> required <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = swap_timetable(\"USD\", [0.5, 1.0, 1.5], 0.05)\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time op  quantity  unit\n1  .swp   0.5  +     1.000   USD\n2  .swp   1.0  +    -1.025   USD\n3  .swp   1.0  +     1.000   USD\n4  .swp   1.5  +    -1.025   USD\n</code></pre> Source code in <code>qablet_contracts\\rate\\swaption.py</code> <pre><code>def swap_timetable(\n    ccy: str, times: List[float], strike_rate: float, track: str = \"\"\n) -&gt; Dict:\n    \"\"\"Create timetable for a **Vanilla Swap**.\n\n    Args:\n        ccy: the currency of the swap.\n        times: the period times of the swap, including the inception and maturity.\n        strike_rate: the strike rate of the swaption (in units, i.e. 0.02 means 200 bps).\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = swap_timetable(\"USD\", [0.5, 1.0, 1.5], 0.05)\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time op  quantity  unit\n        1  .swp   0.5  +     1.000   USD\n        2  .swp   1.0  +    -1.025   USD\n        3  .swp   1.0  +     1.000   USD\n        4  .swp   1.5  +    -1.025   USD\n    \"\"\"\n    events = []\n    # payment events\n    for start, end in zip(times[0:-1], times[1:]):\n        events.extend(\n            simple_swap_period(ccy, start, end, strike_rate, track + \".swp\")\n        )\n\n    return timetable_from_dicts(events)\n</code></pre>"},{"location":"examples/rate_swaption/#qablet_contracts.rate.swaption.swaption_timetable","title":"<code>swaption_timetable(ccy, times, strike_rate, track='')</code>","text":"<p>Create timetable for a Vanilla Swaption.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of the swap.</p> required <code>times</code> <code>List[float]</code> <p>the period times of the underlying swap, including the inception and maturity.</p> required <code>strike_rate</code> <code>float</code> <p>the strike rate of the swaption (in units, i.e. 0.02 means 200 bps).</p> required <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = swaption_timetable(\"USD\", [0.5, 1.0, 1.5], 0.05)\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time op  quantity  unit\n0  .opt   0.5  &gt;     1.000  .swp\n1  .swp   0.5  +     1.000   USD\n2  .swp   1.0  +    -1.025   USD\n3  .swp   1.0  +     1.000   USD\n4  .swp   1.5  +    -1.025   USD\n</code></pre> Source code in <code>qablet_contracts\\rate\\swaption.py</code> <pre><code>def swaption_timetable(\n    ccy: str, times: List[float], strike_rate: float, track: str = \"\"\n) -&gt; Dict:\n    \"\"\"Create timetable for a **Vanilla Swaption**.\n\n    Args:\n        ccy: the currency of the swap.\n        times: the period times of the underlying swap, including the inception and maturity.\n        strike_rate: the strike rate of the swaption (in units, i.e. 0.02 means 200 bps).\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = swaption_timetable(\"USD\", [0.5, 1.0, 1.5], 0.05)\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time op  quantity  unit\n        0  .opt   0.5  &gt;     1.000  .swp\n        1  .swp   0.5  +     1.000   USD\n        2  .swp   1.0  +    -1.025   USD\n        3  .swp   1.0  +     1.000   USD\n        4  .swp   1.5  +    -1.025   USD\n    \"\"\"\n\n    # option expiration event at beginning of the swap\n    events = [\n        {\n            \"track\": track + \".opt\",\n            \"time\": times[0],\n            \"op\": \"&gt;\",\n            \"quantity\": 1,\n            \"unit\": track + \".swp\",\n        }\n    ]\n    # payment events for the underlying swap\n    for start, end in zip(times[0:-1], times[1:]):\n        events.extend(\n            simple_swap_period(ccy, start, end, strike_rate, track + \".swp\")\n        )\n\n    return timetable_from_dicts(events)\n</code></pre>"},{"location":"examples/rate_swaption/#qablet_contracts.rate.swaption.bermuda_swaption_timetable","title":"<code>bermuda_swaption_timetable(ccy, times, strike_rate, track='')</code>","text":"<p>Create timetable for a Co-terminal Bermuda Swaption.</p> <p>Parameters:</p> Name Type Description Default <code>ccy</code> <code>str</code> <p>the currency of the swap.</p> required <code>times</code> <code>List[float]</code> <p>the period times of the underlying swap, including the inception and maturity.</p> required <code>strike_rate</code> <code>float</code> <p>the strike rate of the swaption (in units, i.e. 0.02 means 200 bps).</p> required <code>track</code> <code>str</code> <p>an optional identifier for the contract.</p> <code>''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tt = bermuda_swaption_timetable(\"USD\", [0.5, 1.0, 1.5], 0.05)\n&gt;&gt;&gt; tt[\"events\"].to_pandas()\n  track  time op  quantity  unit\n0  .opt   0.5  &gt;     1.000  .swp\n1  .swp   0.5  +     1.000   USD\n2  .swp   1.0  +    -1.025   USD\n3  .opt   1.0  &gt;     1.000  .swp\n4  .swp   1.0  +     1.000   USD\n5  .swp   1.5  +    -1.025   USD\n</code></pre> Source code in <code>qablet_contracts\\rate\\swaption.py</code> <pre><code>def bermuda_swaption_timetable(\n    ccy: str, times: List[float], strike_rate: float, track: str = \"\"\n) -&gt; Dict:\n    \"\"\"Create timetable for a **Co-terminal Bermuda Swaption**.\n\n    Args:\n        ccy: the currency of the swap.\n        times: the period times of the underlying swap, including the inception and maturity.\n        strike_rate: the strike rate of the swaption (in units, i.e. 0.02 means 200 bps).\n        track: an optional identifier for the contract.\n\n    Examples:\n        &gt;&gt;&gt; tt = bermuda_swaption_timetable(\"USD\", [0.5, 1.0, 1.5], 0.05)\n        &gt;&gt;&gt; tt[\"events\"].to_pandas()\n          track  time op  quantity  unit\n        0  .opt   0.5  &gt;     1.000  .swp\n        1  .swp   0.5  +     1.000   USD\n        2  .swp   1.0  +    -1.025   USD\n        3  .opt   1.0  &gt;     1.000  .swp\n        4  .swp   1.0  +     1.000   USD\n        5  .swp   1.5  +    -1.025   USD\n    \"\"\"\n\n    events = []\n    for start, end in zip(times[0:-1], times[1:]):\n        # option expiration event before each period\n        events.append(\n            {\n                \"track\": track + \".opt\",\n                \"time\": start,\n                \"op\": \"&gt;\",\n                \"quantity\": 1,\n                \"unit\": track + \".swp\",\n            }\n        )\n        # payment event for the underlying swap\n        events.extend(\n            simple_swap_period(ccy, start, end, strike_rate, track + \".swp\")\n        )\n\n    return timetable_from_dicts(events)\n</code></pre>"},{"location":"specifications/batch/","title":"Batch","text":"<p>To be documented in a future revision.</p>"},{"location":"specifications/expressions/","title":"Expressions","text":"<p>The event table is often requires one or more of the following to capture the features of contract.</p> <ul> <li>A Phrase that represents a value calculated from one or more assets. e.g. calculating the barrier condition in a knock out option.</li> <li>A Snapper that represents a path dependent calculation, e.g. calculating returns in an equity cliquet.</li> <li>A Batch that represents a transition from a set of tracks to another set of tracks.</li> </ul>"},{"location":"specifications/operations/","title":"Operations","text":"<p>The op column contains a string which can be <code>+</code>, <code>&gt;</code>, <code>&lt;</code>, or a condition</p>"},{"location":"specifications/operations/#payment","title":"Payment (+)","text":"<p><code>+</code> in the ops column indicates that the contract holder will receive the payment specified by the quantity and the unit, and then continue to receive whatever else is further down in the timetable in the same track.</p> <p>Example: A bond paying 5 USD semi-annually and maturing in two years. </p> <pre><code>  track  time op  quantity unit\n         0.5  +         5  USD\n         1.0  +         5  USD\n         1.5  +         5  USD\n         2.0  +       105  USD\n</code></pre>"},{"location":"specifications/operations/#choice-of-contract-holder","title":"Choice of contract holder (&gt;)","text":"<p><code>&gt;</code> in the ops column indicates that the contract holder can choose from the following two options</p> <ul> <li>receive the payment specified by the quantity and the unit, and then terminate the contract.</li> <li>or, instead of that payment, receive whatever else is further down in the timetable in the same track.</li> </ul> <p>Example: An European Call Option with strike 2800, expiring in 1 year.</p> <pre><code>  track  time op  quantity unit\n         1.0  &gt;       0.0  USD\n         1.0  +   -2800.0  USD\n         1.0  +       1.0  SPX\n</code></pre>"},{"location":"specifications/operations/#choice-of-contracts-counterparty","title":"Choice of contract's counterparty (&lt;)","text":"<p><code>&lt;</code> in the ops column indicates that the counterparty can choose from the following two options</p> <ul> <li>pay the holder the payment specified by the quantity and the unit, and then terminate the contract.</li> <li>or, instead of that payment, pay the holder whatever else is further down in the timetable in the same track.</li> </ul> <p>Example: A callable bond, paying 5 USD semi-annually, maturing in two years, and callable at the end of the first year.</p> <pre><code>  track  time op  quantity unit\n         0.5  +         5  USD\n         1.0  +         5  USD\n         1.0  &lt;       100  USD\n         1.5  +         5  USD\n         2.0  +       105  USD\n</code></pre>"},{"location":"specifications/operations/#contingent-event","title":"Contingent Event","text":"<p>Any other string in the <code>op</code> column is assumed to be a phrase.</p> <ul> <li>If the phrase evaluates to true, the holder will receive the payment specified by the quantity and the unit, and then terminate the contract.</li> <li>If the phrase evaluates to false, then instead of that payment, holder will receive whatever else is further down in the timetable in the same track.</li> <li>If the phrase returns a float array instead of a bool array, the holder will receive a weighted sum of both outcomes.</li> </ul> <p>Example: knock-in or knock-out events in a barrier option. In the example below <code>KO</code> is a phrase that describes the barrier condition. If the condition is met the option is knocked out with a rebate of 10. If the barrier is not met, the contract continues further down the track.</p> <pre><code>  track  time op  quantity unit\n         0.5  KO     10.0  USD\n         1.0  &gt;       0.0  USD\n         1.0  +   -2800.0  USD\n         1.0  +       1.0  SPX\n</code></pre>"},{"location":"specifications/operations/#snapper","title":"Snapper","text":"<p>If the unit is a Snapper, i.e. a path dependent calculation to be performed at that time, then op should be <code>None</code> or <code>\"s\"</code>.</p>"},{"location":"specifications/phrase/","title":"Phrase","text":"<p>A Phrase represents a value calculated from one or more assets. e.g. calculating the barrier condition in a knock out option.</p> <p>A phrase is defined in the dataset, with three parameters.</p> <ul> <li>type, which must be \"phrase\"</li> <li>inp, a list of inputs to the phrase fn. An input can be an asset, such as \"SPX\", whose value comes from the model. It can also be a snap which has been stored as a result of previous snapper operation. It can also be another phrase.</li> <li>fn, a python function that takes a list of inputs, and returns a list of outputs. The length of expected inputs list must match the length of inp, while the length of the output list must be exactly one.</li> </ul> <p>e.g.</p> <pre><code>\ndef ko_fn(inputs):\n    [S] = inputs\n    return [S &lt; barrier]\n\n\"KO\": {\n    \"type\": \"phrase\",\n    \"inp\": [asset_name],\n    \"fn\": ko_fn,\n}\n\n</code></pre>"},{"location":"specifications/phrase/#function-signature","title":"Function Signature","text":"<p>The function should expect that inputs is a list of items. </p> <ul> <li>The length of the list will match the length of inp.</li> <li>Each item in the list can be a float, or a 1-D numpy array of size 1 or N (where N is the number of Monte-Carlo paths, or the length of the Finite Difference grid's asset-axis).</li> </ul> <p>The function should return a list of items.</p> <ul> <li>For a phrase the length of the output list must be exactly one, while for a snapper the length of the output list must match the lnegth of out.</li> <li>Each item inthe list should be a float, or a 1-D numpy array of size 1 or N. </li> </ul> <p>The item requirements are consistent with numpy broadcasting, therefore a function written using arithmetic operations like <code>+</code>, <code>-</code>, <code>*</code>, or element-wise numpy functions (e.g. <code>numpy.maximum</code>, <code>np.sqrt</code>) would satisfy these requirements.</p>"},{"location":"specifications/snapper/","title":"Snapper","text":"<p>A Snapper represents a path dependent calculation, e.g. calculating returns in an equity cliquet. In the following timetable</p> <ul> <li>the first event at time 0.5 represents a snapper operation <code>UPDATE</code>. This operation stores its result in a snap.</li> <li>the second event at time 3.0 represents a payment for the contract, which pays <code>A</code>, the value of the snap.</li> </ul> <pre><code>  track  time op  quantity     unit\n    NaN   0.5  s      0.00   UPDATE\n          3.0  +      1.00        A\n</code></pre> <p>A snapper is defined in the dataset, with four parameters. </p> <ul> <li>type, which must be \"snapper\"</li> <li>inp, a list of inputs to the snapper fn. These can be assets, such as \"SPX\", whose value comes from the model. These can also be snaps, such as \"A\" or \"S_last\", which has been stored as a result of previous snapper operation. </li> <li>fn, a python function that takes a list of inputs, and returns a list of outputs. The length of expected inputs list must match the length of inp, while the length of the output list must match the length of out.</li> <li>out, the list of name of snaps where the outputs are stored.  </li> </ul> <p>e.g.</p> <pre><code># Define the function\ndef accumulator_update_fn(inputs):\n    [s, s_last, a] = inputs\n\n    ret = s / s_last - 1.0  # ret = S / S_last - 1\n    ret = np.maximum(local_floor, ret)\n    ret = np.minimum(local_cap, ret)\n\n    return [a + ret, s]  # [A, S_last]\n\n# Define the snapper\n\"UPDATE\": {\n    \"type\": \"snapper\",\n    \"inp\": [\"SPX\", \"S_last\", \"A\"],\n    \"fn\": accumulator_update_fn,\n    \"out\": [\"A\", \"S_last\"],\n},\n</code></pre>"},{"location":"specifications/snapper/#function-signature","title":"Function Signature","text":"<p>See Phrase Function Signature</p>"},{"location":"specifications/timetable/","title":"Timetable","text":"<p>A contract is described by a list of events. An event has five properties -  track, time, op, quantity, and unit. Here is an example of an equity call option contract on SPX, with strike 2800 and one year expiration. It is described using three events.</p> <pre><code> track  time op  quantity unit\n         1.0  &gt;       0.0  USD\n         1.0  +   -2800.0  USD\n         1.0  +       1.0  SPX\n</code></pre>"},{"location":"specifications/timetable/#track","title":"Track","text":"<p>A string identifier for the contract, a leg of the contract, or a state of the contract. For simple contracts this might be just blank.</p>"},{"location":"specifications/timetable/#time","title":"Time","text":"<p>The time of an event in years (float) from the valuation date.</p>"},{"location":"specifications/timetable/#op","title":"Op","text":"<p>A string which can be <code>+</code>, <code>&gt;</code>, <code>&lt;</code>, or a condition. See more in the Operations section.</p>"},{"location":"specifications/timetable/#quantity","title":"Quantity","text":"<p>The quantity being paid (float).</p>"},{"location":"specifications/timetable/#unit","title":"Unit","text":"<p>A string that represents what is being paid. It can be a currency like <code>USD</code>, <code>EUR</code>, or a stock like <code>SPX</code>, <code>AAPL</code>, etc. See the Units section for all possible variants.</p>"},{"location":"specifications/timetable/#how-to-create-a-timetable","title":"How to create a timetable","text":"<p>The timetable is a dictionary with two components.</p> <ul> <li>events: the sequence of events stored as a pyarrow recordbatch</li> <li>expresions: a dictionary defining any phrases, snappers, or batches used in the timetable</li> </ul> <p>A simple timetable (without any expressions) can be created using this method, from a list of dicts.</p>"},{"location":"specifications/timetable/#qablet_contracts.timetable.timetable_from_dicts","title":"<code>timetable_from_dicts(events)</code>","text":"<p>Create timetable from a list of dicts.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[Dict]</code> <p>a list of dicts with the following fields:</p> <ul> <li>track: string</li> <li>time: float</li> <li>op: string</li> <li>quantity: float</li> <li>unit: string</li> </ul> required <p>Returns:</p> Type Description <code>Dict</code> <p>a timetable dictionary with the following fields:</p> <ul> <li>events: a pyarrow record batch</li> <li>expressions: a dict for expressions, batches, and snappers</li> </ul> Source code in <code>qablet_contracts\\timetable.py</code> <pre><code>def timetable_from_dicts(events: List[Dict]) -&gt; Dict:\n    \"\"\"Create timetable from a list of dicts.\n\n    Args:\n        events: a list of dicts with the following fields:\n\n            - track: string\n            - time: float\n            - op: string\n            - quantity: float\n            - unit: string\n\n    Returns:\n        a timetable dictionary with the following fields:\n\n            - events: a pyarrow record batch\n            - expressions: a dict for expressions, batches, and snappers\n\n    \"\"\"\n    return {\n        \"events\": pa.RecordBatch.from_pylist(events, schema=EVENT_SCHEMA),\n        \"expressions\": {},\n    }\n</code></pre>"},{"location":"specifications/timetable/#example","title":"Example","text":"<p>Define a contract that pays 100 USD after 1 year.</p> <pre><code>from api import timetable_from_dicts\n\nevents = [\n    {\n        \"track\": \"\",\n        \"time\": 1.0,\n        \"op\": \"+\",\n        \"quantity\": 100.0,\n        \"unit\": \"USD\"\n    },\n]\ntimetable = timetable_from_dicts(events)\nprint(timetable[\"events\"].to_pandas())\n</code></pre> <p>Output:</p> <pre><code>  track  time op  quantity unit\n0         1.0  +     100.0  USD\n</code></pre>"},{"location":"specifications/units/","title":"Unit","text":"<p>A string representing what is being paid. It can be a </p> <ul> <li>a currency like <code>USD</code>, <code>EUR</code></li> <li>a stock, or a commodity, like <code>AAPL</code>, <code>CL</code> </li> <li>a Track, e.g. the fixed leg of a swap</li> <li>an Expression, e.g. a libor fixing, a barrier, or a digital.</li> <li>a Batch event, e.g. issuers option to deliver one of many bonds. See more in the Batch section.</li> <li>a Snap, i.e. a path dependent quantity, e.g. an accumulator cliquet. See more in the Snapper section.</li> </ul> <p>It can also represent an action, such as</p> <ul> <li>a Snapper, e.g update an accumulator from the current return.</li> </ul>"}]}